/*--------------------------------------------------*/
/*--------------------Legend------------------------*/
/* '<Type>'          = Token type                   */
/* '<Type:Value>'    = Token                        */
/* 'someRule := ...' = Grammar rule creation        */
/* 'someRule'        = Grammar rule calling         */
/* '...*'            = Zero or more times           */
/* '...+'            = One or more times            */
/* '...?'            = Zero or one times            */
/* '(...)'           = Grouping                     */
/* '...|...'         = Either one. Can be chained   */
/*--------------------------------------------------*/
/* Begin from the top, jump to other rules when     */
/* They get called.                                 */
/*--------------------------------------------------*/

statement_list      := (<NEW_LINE>)* (statement (<NEW_LINE>)+)*

statement           := var_declaration
                    := var_assignment
                    := <BREAK>
                    := <CONTINUE>
                    := <IF> expression <THEN> statement_list
                            (<ELIF> expression <THEN> statement_list)*
                            (<ELSE> statement_list)?
                            <END>
                    := <FOR> (var_declaration|expression)
                            <COMMA> <expression> <COMMA> (var_assignment|expression) <DO> statement_list <END>

                    := expression

var_declaration     := <VAR> <IDENTIFIER> <ASSIGN> expression
                    := <VAR> <IDENTIFIER>

var_assignment      := <IDENTIFIER> <ASSIGN|ASSIGN_ADD|ASSIGN_SUB|ASSIGN_MUL|ASSIGN_DIV> expression

func_def            := <FUNC> <IDENTIFIER> (<DOT|COLON> <IDENTIFIER>)? <LPAREN> (<IDENTIFIER> (<COMMA> <IDENTIFIER>)*)? <RPAREN> statement_list <END>

expression          := logic_or

// This section shows expression precedence. Lower rules have higher precedence

logic_or            := logic_and (<LOGIC_OR> logic_and)*

logic_and           := logic_not (<LOGIC_AND> logic_not)*

logic_not           := <LOGIC_NOT> logic_not
                    := comparison

comparison          := add_expr (<LESS_THAN | GREATER_THAN | LESS_EQUAL | GREATER_EQUAL | EQUAL | NOT_EQUAL> add_expr)*

add_expr            := mul_expr (<ADD|SUB> mul_expr)*

mul_expr            := sign (<MUL|DIV|MOD> sign)*

sign                := <ADD|SUB> sign
                    := power

power               := is_expr (<Power> sign)*

is_expr             := call <IS> (<NOT>)? (<BUILTIN_TYPE | IDENTIFIER>)

call                := index (<LPAREN> (expression (<COMMA> expression)*)? <RPAREN>)?

index               := subscript (<DOT|COLON> <IDENTIFIER>)?

subscript           := factor (<LBRACKET> expression <RBRACKET>)?

factor              := <NUMBER_LITERAL|STRING_LITERAL|BOOL_LITERAL|NULL_LITERAL|IDENTIFIER>
                    := object_literal
                    := lambda_function
                    := <LPAREN> expression <RPAREN>

object_literal      := <LBRACE> (expression (<COMMA> expression)* (<COMMA>)?)? <RBRACE>

lambda_function     := <FUNC> <LPAREN> (<IDENTIFIER> (<COMMA> <IDENTIFIER>)*)? <RPAREN> statement_list <END>
