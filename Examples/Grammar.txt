/*--------------------------------------------------*/
/*--------------------Legend------------------------*/
/* '<Type>'          = Token type                   */
/* '<Type:Value>'    = Token                        */
/* 'someRule := ...' = Grammar rule creation        */
/* 'someRule'        = Grammar rule calling         */
/* '...*'            = Zero or more times           */
/* '...+'            = One or more times            */
/* '...?'            = Zero or one times            */
/* '(...)'           = Grouping                     */
/* '...|...'         = Either one. Can be chained   */
/*--------------------------------------------------*/
/* Begin from the top, jump to other rules when     */
/* They get called.                                 */
/*--------------------------------------------------*/

statement           := <KEYWORD:var> <IDENTIFIER> <ASSIGN> expression
                    := <KEYWORD:var> <IDENTIFIER> expression
                    := <IDENTIFIER> <ASSIGN> expression
                    := expression

expression          := logic_or

// This section shows expression precedence. Lower rules have higher precedence

logic_or            := logic_and (<KEYWORD:or> logic_and)*

logic_and           := logic_not (<KEYWORD:and> logic_not)*

logic_not           := <KEYWORD:not> logic_not
                    := comparison

comparison          := add_expr (<LESS_THAN | GREATER_THAN | LESS_EQUAL | GREATER_EQUAL | EQUAL | NOT_EQUAL> add_expr)*

add_expr            := mul_expr (<ADD|SUB> mul_expr)*

mul_expr            := sign (<MUL|DIV> sign)*

sign                := <ADD|SUB> sign
                    := power

power               := (factor <Power>) sign*

factor              := <INT_LITERAL|FLOAT_LITERAL|IDENTIFIER>
                    := <LPAREN> expression <RPAREN>
                